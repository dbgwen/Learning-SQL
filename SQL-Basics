SQL was developed by IBM in the 1970s, originally called SEQUEL. It was then changed to SQL due to trademarks. In non-ENglish languages many pronounce it S-Q-L instead of Sequel. Many pronounce it both ways. 

## SQL Basics
    - Query language for relational databases
    - Relational databases makes it easier to relate multiple tables
    - A relational database management system (RDBMS) is a program that allows you 
      to create, update, and administer a relational database
    - Most relational database management systems use the SQL language to access the database
    - MySQL, PostgreSQL, Oracle DB, SQL Server, SQLite
  
 * Relational Databases 
    
    A relational database is a type of database. It uses a structure that allows us to identify and 
      access data in relation to another piece of data in the database. Often, data in a relational database is organized into tables
      
 * Tables: Rows and Columns
    
    Tables can have hundreds, thousands, sometimes even millions of rows of data. These rows are often called records
    Tables can also have many columns of data. Columns are labeled with a descriptive name (say, age for example) and have a specific data type
    
    - CREATE TABLE creates a new table
    - INSERT INTO adds a new row to a table
    - SELECT queries data from a table
    - ALTER TABLE changes an existing table
    - UPDATE edits a row in a table
    - DELETE FROM deletes rows from a table

 * SQL Statements
  
    # A statement is text that the database recognizes as a valid command. Statements always end in a semicolon ;
    
      CREATE TABLE table_name (
         column_1 data_type, 
         column_2 data_type, 
         column_3 data_type
      );

      1. CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters
          Clauses can also be referred to as commands
      2. table_name refers to the name of the table that the command is applied to
      3. (column_1 data_type, column_2 data_type, column_3 data_type) is a parameter
          A parameter is a list of columns, data types, or values that are passed to a clause as an argument
          Here, the parameter is a list of column names and the associated data type
          
    # The INSERT statement inserts a new row into a table
     
      INSERT INTO celebs (id, name, age) 
      VALUES (1, 'Justin Bieber', 22);
      
      1. INSERT INTO is a clause that adds the specified row or rows
      2. celebs is the table the row is added to
      3. (id, name, age) is a parameter identifying the columns that data will be inserted into.
      4. VALUES is a clause that indicates the data being inserted
      5. (1, 'Justin Bieber', 22) is a parameter identifying the values being inserted.
          1: an integer that will be added to id column
          'Justin Bieber': text that will be added to name column
          22: an integer that will be added to age column
    
    # SELECT statements are used to fetch data from a database
    
      SELECT name FROM celebs;
      
      1. SELECT is a clause that indicates that the statement is a query. You will use SELECT every time you query data from a database
      2. name specifies the column to query data from
      3. FROM celebs specifies the name of the table to query data from
      
      SELECT * FROM celebs;
      
      '*' is a special wildcard character that we have been using
        It allows you to select every column in a table without having to name each one individually

    # The ALTER TABLE statement adds a new column to a table
    
      ALTER TABLE celebs 
      ADD COLUMN twitter_handle TEXT;
      
      1. ALTER TABLE is a clause that lets you make the specified changes
      2. celebs is the name of the table that is being changed
      3. ADD COLUMN is a clause that lets you add a new column to a table:
         - twitter_handle is the name of the new column being added
         - TEXT is the data type for the new column
      4. NULL is a special value in SQL that represents missing or unknown data
          Here, the rows that existed before the column was added have NULL (âˆ…) values for twitter_handle
      
    # The UPDATE statement edits a row in a table
      
      UPDATE celebs 
      SET twitter_handle = '@taylorswift13' 
      WHERE id = 4;
      
      1. UPDATE is a clause that edits a row in the table
      2. celebs is the name of the table
      3. SET is a clause that indicates the column to edit
         - twitter_handle is the name of the column that is going to be updated
         - @taylorswift13 is the new value that is going to be inserted into the twitter_handle column

      4. WHERE is a clause that indicates which row(s) to update with the new column value
         Here the row with a 4 in the id column is the row that will have the twitter_handle updated to @taylorswift13
      
    # The DELETE FROM statement deletes one or more rows from a table
    
      DELETE FROM celebs 
      WHERE twitter_handle IS NULL;
      
      1. DELETE FROM is a clause that lets you delete rows from a table.
      2. celebs is the name of the table we want to delete rows from.
      3. WHERE is a clause that lets you select which rows you want to delete. Here we want to delete all of the rows where the twitter_handle column IS NULL.
      4. IS NULL is a condition in SQL that returns true when the value is NULL and false otherwise.

 * Constraints
 
    - Constraints that add information about how a column can be used are invoked after specifying the data type for a column
    - They can be used to tell the database to reject inserted data that does not adhere to a certain restriction
    
      CREATE TABLE celebs (
         id INTEGER PRIMARY KEY, 
         name TEXT UNIQUE,
         date_of_birth TEXT NOT NULL,
         date_of_death TEXT DEFAULT 'Not Applicable'
      );
    
      1. PRIMARY KEY columns can be used to uniquely identify the row. Attempts to insert a row with an identical value to a 
          row already in the table will result in a constraint violation which will not allow you to insert the new row
      2. UNIQUE columns have a different value for every row. This is similar to PRIMARY KEY except a table can have many different UNIQUE columns.
      3. NOT NULL columns must have a value. Attempts to insert a row without a value for a NOT NULL column will result in a 
          constraint violation and the new row will not be inserted
      4. DEFAULT columns take an additional argument that will be the assumed value for an inserted row if the new row does 
          not specify a value for that column
    
## Creating a Table + Inserting Data

    CREATE TABLE table_name (column_names); 
    CREATE TABLE grocery (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER);
        **Typically identify the ID column first
        
    INSERT INTO groceries VALUES( (1, "Bananas", 4); 
    INSERT INTO groceries VALUES (2, "Peanut Butter", 1); 
    INSERT INTO groceries VALUES (3, "Dark Chocolate", 2); 
    
    SELECT column_name FROM table_name; 
    SELECT * FROM groceries ORDER BY column_name; 
    SELECT * FROM groceries WHERE column_name > 5 ORDER BY column_name; 
    
    CREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, aisle INTEGER); 
    INSERT INTO groceries VALUES (1,"Bananas", 56, 7); 
    INSERT INTO groceries VALUES (2, "Peanut Butter", 1, 2); 
    INSERT INTO groceries VALUES (3, "Dark Choclate", 2, 2); 
    INSERT INTO groceries VALUES (4, "Ice Cream", 1, 12); 
    INSERT INTO groceries VALUES (5, "Cherries", 6, 2); 
    INSERT INTO groceries VALUES (6, "Chocolate Syrup", 1, 4); 
    
    SELECT SUM(quantity) FROM groceries; 
    SELECT SUM(quantity) FROM groceries GROUP BY aisle; 
    SELECT aisle, SUM(quantity) FROM groceries GROUP BY aisle; **first grouped by aisle, summed quantity and selected first aisle value 

## More complex queries with AND/OR
    
    CREATE TABLE exercise_logs (id INTEGER PRIMARY KEY AUTOINCREMENT, type TEXT, minutes INTEGER, calories INTEGER, heart_rate INTEGER); 
      **id column is primary key and set to autoincrement, the database will automatically fill it in for us, usually a number bigger than the one so far
    
    INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("biking, 30, 100, 110); 
    
    SELECT * FROM exercise_logs WHERE calories > 50 ORDER BY calories; 
    SELECT * FROM exercise_logs WHERE calories > 50 AND minutes < 30; 
    SELECT * FROM exercise_logs WHERE calories > 50 OR heart_rate > 100; 
    
    ** AND has precendence over the OR operator, can use them as much as needed in wach query
    
## LIKE operator
 
    SELECT * FROM exercise_logs WHERE type IN (SELECT type FROM drs_favorites WHERE reason LIKE "cardiovascular%");
   
## Querying IN subqueries
 
    SELECT * FROM exercise_logs WHERE type ="biking" OR type ="hiking"; 
    SELECT * FROM exercise_logs WHERE type IN ("biking, "hiking", "tree climbing"); 
    SELECT * FROM exercise_logs WHERE type IN (SELECT type FROM drs_favorites); **will always pull based on whats in the drs_favorite 
    
## Challenge with IN subqueries

    CREATE TABLE artists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    country TEXT,
    genre TEXT);

    INSERT INTO artists (name, country, genre)
        VALUES ("Taylor Swift", "US", "Pop");
    INSERT INTO artists (name, country, genre)
        VALUES ("Led Zeppelin", "US", "Hard rock");
    INSERT INTO artists (name, country, genre)
        VALUES ("ABBA", "Sweden", "Disco");
    INSERT INTO artists (name, country, genre)
        VALUES ("Queen", "UK", "Rock");
    INSERT INTO artists (name, country, genre)
        VALUES ("Celine Dion", "Canada", "Pop");
    INSERT INTO artists (name, country, genre)
        VALUES ("Meatloaf", "US", "Hard rock");
    INSERT INTO artists (name, country, genre)
        VALUES ("Garth Brooks", "US", "Country");
    INSERT INTO artists (name, country, genre)
        VALUES ("Shania Twain", "Canada", "Country");
    INSERT INTO artists (name, country, genre)
        VALUES ("Rihanna", "US", "Pop");
    INSERT INTO artists (name, country, genre)
        VALUES ("Guns N' Roses", "US", "Hard rock");
    INSERT INTO artists (name, country, genre)
        VALUES ("Gloria Estefan", "US", "Pop");
    INSERT INTO artists (name, country, genre)
        VALUES ("Bob Marley", "Jamaica", "Reggae");

    CREATE TABLE songs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        artist TEXT,
        title TEXT);

    INSERT INTO songs (artist, title)
        VALUES ("Taylor Swift", "Shake it off");
    INSERT INTO songs (artist, title)
        VALUES ("Rihanna", "Stay");
    INSERT INTO songs (artist, title)
        VALUES ("Celine Dion", "My heart will go on");
    INSERT INTO songs (artist, title)
        VALUES ("Celine Dion", "A new day has come");
    INSERT INTO songs (artist, title)
        VALUES ("Shania Twain", "Party for two");
    INSERT INTO songs (artist, title)
        VALUES ("Gloria Estefan", "Conga");
    INSERT INTO songs (artist, title)
        VALUES ("Led Zeppelin", "Stairway to heaven");
    INSERT INTO songs (artist, title)
        VALUES ("ABBA", "Mamma mia");
    INSERT INTO songs (artist, title)
        VALUES ("Queen", "Bicycle Race");
    INSERT INTO songs (artist, title)
        VALUES ("Queen", "Bohemian Rhapsody");
    INSERT INTO songs (artist, title)
        VALUES ("Guns N' Roses", "Don't cry");


    SELECT title FROM songs WHERE artist="Queen";
    SELECT name FROM artists WHERE genre="Pop";
    SELECT title FROM songs WHERE artist IN (SELECT name FROM artists WHERE genre="Pop");

## Grouped Results with HAVING

      SELECT * FROM exercise_logs;
      SELECT type, SUM(calories) FROM exercise_logs GROUP BY type;
          SELECT type, SUM(calories) AS total_calories FROM exercise_logs GROUP BY type;
      SELECT type, SUM(calories) AS total_calories FROM exercise_logs GROUP BY type
                                                    HAVING total_calories > 150; **grabs logs >150 across all rows
      SELECT type, AVG(calories) AS avg_calories FROM exercise_logs GROUP BY type
                                                    HAVING total_calories > 70;

      SELECT type FROM exercise_logs GROUP BY type
      HAVING COUNT(*) >=2; **grabs logs that have more than 2 records
    
    ** It is easy to confuse HAVING and WHERE
    
## Challenge with GROUP BY and HAVING

    CREATE TABLE books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    author TEXT,
    title TEXT,
    words INTEGER);
    
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Philosopher's Stone", 79944);
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Chamber of Secrets", 85141);
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Prisoner of Azkaban", 107253);
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Goblet of Fire", 190637);
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Order of the Phoenix", 257045);
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Half-Blood Prince", 168923);
    INSERT INTO books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Deathly Hallows", 197651);

    INSERT INTO books (author, title, words)
        VALUES ("Stephenie Meyer", "Twilight", 118501);
    INSERT INTO books (author, title, words)
        VALUES ("Stephenie Meyer", "New Moon", 132807);
    INSERT INTO books (author, title, words)
        VALUES ("Stephenie Meyer", "Eclipse", 147930);
    INSERT INTO books (author, title, words)
        VALUES ("Stephenie Meyer", "Breaking Dawn", 192196);

    INSERT INTO books (author, title, words)
        VALUES ("J.R.R. Tolkien", "The Hobbit", 95022);
    INSERT INTO books (author, title, words)
        VALUES ("J.R.R. Tolkien", "Fellowship of the Ring", 177227);
    INSERT INTO books (author, title, words)
        VALUES ("J.R.R. Tolkien", "Two Towers", 143436);
    INSERT INTO books (author, title, words)
        VALUES ("J.R.R. Tolkien", "Return of the King", 134462);
        
    SELECT author, SUM(words) AS total_words FROM books GROUP BY author HAVING total_words > 1000000;
    SELECT author, AVG(words) AS avg_words FROM books GROUP BY author HAVING avg_words > 150000;

## Caluclating Results with CASE **CASE is tricky (similar to a If or Switch in other languages)

   SELECT * FROM exercise_logs;
   SELECT COUNT(*) FROM exercise_logs WHERE heart_rate > 220 - 30; 
   SELECT COUNT(*) FROM exercise_logs WHERE heart_rate > ROUND(0.50 * (22-30)) AND heart_rate <= ROUND(0.90 * (220-30)); 
   
   SELECT COUNT(*),
          CASE
              WHEN heart_rate > 220-30 THEN "above max" 
              WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"
              WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"
              ELSE "below target"
              END as "hr_zone"
              FROM exercise_logs
              GROUP BY hr_zone;
    
 ## Challenge: Using CASE
 
      CREATE TABLE student_grades (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT,
          number_grade INTEGER,
          fraction_completed REAL);

      INSERT INTO student_grades (name, number_grade, fraction_completed)
          VALUES ("Winston", 90, 0.805);
      INSERT INTO student_grades (name, number_grade, fraction_completed)
          VALUES ("Winnefer", 95, 0.901);
      INSERT INTO student_grades (name, number_grade, fraction_completed)
          VALUES ("Winsteen", 85, 0.906);
      INSERT INTO student_grades (name, number_grade, fraction_completed)
          VALUES ("Wincifer", 66, 0.7054);
      INSERT INTO student_grades (name, number_grade, fraction_completed)
          VALUES ("Winster", 76, 0.5013);
      INSERT INTO student_grades (name, number_grade, fraction_completed)
          VALUES ("Winstonia", 82, 0.9045);

      SELECT name, number_grade, (ROUND(fraction_completed*100)) AS percent_completed FROM student_grades; 

      SELECT COUNT(*),
              CASE
                  WHEN number_grade > 90 THEN "A" 
                  WHEN number_grade > 80 THEN "B"
                  WHEN number_grade > 70 THEN "C"
                  ELSE "F"
                  END as "letter_grade"
                  FROM student_grades
                  GROUP BY letter_grade;

## Data Dig - Data Summary

        CREATE TABLE marvels (ID INTEGER PRIMARY KEY,
            name TEXT,
            popularity INTEGER,
            alignment TEXT,
            gender TEXT, 
            height_m NUMERIC,
            weight_kg NUMERIC,
            hometown TEXT,
            intelligence INTEGER,
            strength INTEGER,
            speed INTEGER,
            durability INTEGER,
            energy_Projection INTEGER,
            fighting_Skills INTEGER);

        INSERT INTO marvels VALUES(1, "Spider Man", 1, "Good", "Male", 1.78, 75.75, "USA", 4, 4, 3, 3, 1, 4); 
        INSERT INTO marvels VALUES(2, "Iron Man", 20, "Neutral", "Male", 1.98, 102.58, "USA", 6, 6, 5, 6, 6, 4); 
        INSERT INTO marvels VALUES(3, "Hulk", 18, "Neutral", "Male", 2.44, 635.29, "USA", 6, 7, 3, 7, 5, 4); 
        INSERT INTO marvels VALUES(4, "Wolverine", 3, "Good", "Male", 1.6, 88.46, "Canada", 2, 4, 2, 4, 1, 7);
        INSERT INTO marvels VALUES(5, "Thor", 5, "Good", "Male", 1.98, 290.3, "Norway", 2, 7, 7, 6, 6, 4);
        INSERT INTO marvels VALUES(6, "Green Goblin", 91, "Bad", "Male", 1.93, 174.63, "USA", 4, 4, 3, 4, 3, 3);
        INSERT INTO marvels VALUES(7, "Magneto", 11, "Neutral", "Male", 1.88, 86.18, "Germany", 6, 3, 5, 4, 6, 4);
        INSERT INTO marvels VALUES(8, "Thanos", 47, "Bad", "Male", 2.01, 446.79, "Titan", 6, 7, 7, 6, 6, 4);
        INSERT INTO marvels VALUES(9, "Loki", 32, "Bad", "Male", 1.93, 238.14, "Jotunheim", 5, 5, 7, 6, 6, 3);
        INSERT INTO marvels VALUES(10, "Doctor Doom", 19, "Bad", "Male", 2.01, 188.24, "Latveria", 6, 4, 5, 6, 6, 4);
        INSERT INTO marvels VALUES(11, "Jean Greay", 8, "Good", "Female", 1.68, 52.16, "USA", 3, 2, 7, 7, 7, 4);
        INSERT INTO marvels VALUES(12, "Rogue", 4, "Good", "Female", 1.73, 54.43, "USA", 7, 7, 7, 7, 7, 7);

  * average, max, and min values */

        Select name, AVG(height_m) AS "Average height" FROM marvels GROUP BY name;

        Select name, MAX(strength) AS "Max Strength" FROM marvels GROUP BY name;

        Select name, MIN(intelligence) AS "Min Intelligence" FROM marvels GROUP BY name;

  * numbers per category using HAVING */

        SELECT name, SUM(popularity) AS "Most Popular" FROM marvels GROUP BY name HAVING popularity <10;

        /* New groups with CASE */

         SELECT COUNT(*),
                  CASE
                      WHEN strength >= 7 THEN "Strongest" 
                      WHEN strength >= 6 THEN "Strong"
                      WHEN strength >= 5 THEN "Pretty Strong"
                      WHEN strength >= 4 THEN "Kind of Weak"
                      WHEN strength >= 3 THEN "Weak"
                      WHEN strength >= 2 THEN "Weakest"
                      ELSE "Too weak for Marvel"
                      END as "Strength"
                      FROM marvels
                      GROUP BY Strength;

    * Filter data with AND/OR */

        SELECT name FROM marvels WHERE gender = "Female" AND intelligence = 7 AND strength >5; 
        SELECT name FROM marvels WHERE strength = 6 AND intelligence = 6; 

        SELECT name FROM marvels WHERE strength = 3 OR intelligence = 3;
    
    
    
  
    
